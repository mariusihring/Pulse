syntax = "proto3";

package wallet;

option go_package = "./generated";

// The service definition including streaming RPCs.
service WalletService {
  // Streams WalletResponse messages whenever the wallet is updated.
  rpc AddWallet(WalletRequest) returns (stream WalletResponse);

  // Streams aggregated WalletResponse messages for multiple wallets.
  rpc AggregateWallets(MultiWalletRequest) returns (stream WalletResponse);
}

// Request message for a single wallet.
message WalletRequest {
  string wallet_address = 1;
}

// Request message for multiple wallets.
message MultiWalletRequest {
  repeated string wallet_addresses = 1;
}

// Top‚Äêlevel response message.
message WalletResponse {
  string address = 1;
  double sol_balance = 2;
  double sol_value = 3;
  double wallet_value = 4;
  repeated Token tokens = 5;
  repeated Transaction transactions = 6;
  string last_updated = 7;
  int32 token_amount = 8;
  int32 transaction_amount = 9;
  double progress = 10;
}

// Token information.
message Token {
  string name = 1;
  string address = 2;
  string pool = 3;
  string description = 4;
  string image = 5;
  double amount = 6;
  double price = 7;
  double pnl = 8;
  double invested = 9;
  double value = 10;
  repeated PricePoint history_prices = 11;
}

message PricePoint {
  int32 timestamp = 1;
  double open = 2;
  double high = 3;
  double low = 4;
  double close = 5;
  double volume = 6;
}

// A transaction container.
message Transaction {
  string jsonrpc = 1;
  TransactionResult result = 2;
  Error err = 3;
  int32 id = 4;
}

message Error {
  int32 code = 1;
  string message = 2;
}

// The detailed transaction result.
message TransactionResult {
  int64 block_time = 1;
  Meta meta = 2;
  uint64 slot = 3;
  TransactionData transaction = 4;
}

// Meta data for a transaction.
message Meta {
  uint64 compute_units_consumed = 1;
  uint64 fee = 2;
  repeated InnerInstruction inner_instructions = 3;
  repeated string log_messages = 4;
  repeated uint64 post_balances = 5;
  repeated uint64 pre_balances = 6;
  repeated TokenBalance post_token_balances = 7;
  repeated TokenBalance pre_token_balances = 8;
  repeated Reward rewards = 9;
  Status status = 10;
}

// Inner instructions.
message InnerInstruction {
  uint32 index = 1;
  repeated Instruction instructions = 2;
}

// A token balance record.
message TokenBalance {
  uint32 account_index = 1;
  string mint = 2;
  string owner = 3;
  string program_id = 4;
  TokenAmount ui_token_amount = 5;
}

// Token amount details.
message TokenAmount {
  string amount = 1;
  uint32 decimals = 2;
  double ui_amount = 3;
  string ui_amount_string = 4;
}

// Reward information.
message Reward {
  string info = 1;
}

// Status structure.
message Status {
  oneof result {
    string ok = 1;
    string error_message = 2;
  }
}

// The actual transaction data.
message TransactionData {
  TransactionMessage message = 1;
  repeated string signatures = 2;
}

// The transaction message details.
message TransactionMessage {
  repeated string account_keys = 1;
  repeated AddressTableLookup address_table_lookups = 2;
  MessageHeader header = 3;
  repeated Instruction instructions = 4;
  string recent_blockhash = 5;
}

// Address table lookups.
message AddressTableLookup {
  string account_key = 1;
  repeated uint32 readonly_indexes = 2;
  repeated uint32 writable_indexes = 3;
}

// Header of a transaction message.
message MessageHeader {
  uint32 num_readonly_signed_accounts = 1;
  uint32 num_readonly_unsigned_accounts = 2;
  uint32 num_required_signatures = 3;
}

// An instruction within the transaction.
message Instruction {
  repeated uint32 accounts = 1;
  string data = 2;
  uint32 program_id_index = 3;
  uint32 stack_height = 4;
}

// Status message for transactions.
message StatusMessage {
  string status = 1;
}