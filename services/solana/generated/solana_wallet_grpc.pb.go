// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/solana_wallet.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WalletService_AddWallet_FullMethodName        = "/wallet.WalletService/AddWallet"
	WalletService_AggregateWallets_FullMethodName = "/wallet.WalletService/AggregateWallets"
)

// WalletServiceClient is the client API for WalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The service definition including streaming RPCs.
type WalletServiceClient interface {
	// Streams WalletResponse messages whenever the wallet is updated.
	AddWallet(ctx context.Context, in *WalletRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WalletResponse], error)
	// Streams aggregated WalletResponse messages for multiple wallets.
	AggregateWallets(ctx context.Context, in *MultiWalletRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WalletResponse], error)
}

type walletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletServiceClient(cc grpc.ClientConnInterface) WalletServiceClient {
	return &walletServiceClient{cc}
}

func (c *walletServiceClient) AddWallet(ctx context.Context, in *WalletRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WalletResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WalletService_ServiceDesc.Streams[0], WalletService_AddWallet_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WalletRequest, WalletResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WalletService_AddWalletClient = grpc.ServerStreamingClient[WalletResponse]

func (c *walletServiceClient) AggregateWallets(ctx context.Context, in *MultiWalletRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WalletResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WalletService_ServiceDesc.Streams[1], WalletService_AggregateWallets_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MultiWalletRequest, WalletResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WalletService_AggregateWalletsClient = grpc.ServerStreamingClient[WalletResponse]

// WalletServiceServer is the server API for WalletService service.
// All implementations must embed UnimplementedWalletServiceServer
// for forward compatibility.
//
// The service definition including streaming RPCs.
type WalletServiceServer interface {
	// Streams WalletResponse messages whenever the wallet is updated.
	AddWallet(*WalletRequest, grpc.ServerStreamingServer[WalletResponse]) error
	// Streams aggregated WalletResponse messages for multiple wallets.
	AggregateWallets(*MultiWalletRequest, grpc.ServerStreamingServer[WalletResponse]) error
	mustEmbedUnimplementedWalletServiceServer()
}

// UnimplementedWalletServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWalletServiceServer struct{}

func (UnimplementedWalletServiceServer) AddWallet(*WalletRequest, grpc.ServerStreamingServer[WalletResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AddWallet not implemented")
}
func (UnimplementedWalletServiceServer) AggregateWallets(*MultiWalletRequest, grpc.ServerStreamingServer[WalletResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AggregateWallets not implemented")
}
func (UnimplementedWalletServiceServer) mustEmbedUnimplementedWalletServiceServer() {}
func (UnimplementedWalletServiceServer) testEmbeddedByValue()                       {}

// UnsafeWalletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletServiceServer will
// result in compilation errors.
type UnsafeWalletServiceServer interface {
	mustEmbedUnimplementedWalletServiceServer()
}

func RegisterWalletServiceServer(s grpc.ServiceRegistrar, srv WalletServiceServer) {
	// If the following call pancis, it indicates UnimplementedWalletServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WalletService_ServiceDesc, srv)
}

func _WalletService_AddWallet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WalletRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WalletServiceServer).AddWallet(m, &grpc.GenericServerStream[WalletRequest, WalletResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WalletService_AddWalletServer = grpc.ServerStreamingServer[WalletResponse]

func _WalletService_AggregateWallets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MultiWalletRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WalletServiceServer).AggregateWallets(m, &grpc.GenericServerStream[MultiWalletRequest, WalletResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WalletService_AggregateWalletsServer = grpc.ServerStreamingServer[WalletResponse]

// WalletService_ServiceDesc is the grpc.ServiceDesc for WalletService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wallet.WalletService",
	HandlerType: (*WalletServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddWallet",
			Handler:       _WalletService_AddWallet_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AggregateWallets",
			Handler:       _WalletService_AggregateWallets_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/solana_wallet.proto",
}
