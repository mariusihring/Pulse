// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: proto/solana_wallet.proto

package generated

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for a single wallet.
type WalletRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WalletAddress string                 `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WalletRequest) Reset() {
	*x = WalletRequest{}
	mi := &file_proto_solana_wallet_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletRequest) ProtoMessage() {}

func (x *WalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_wallet_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletRequest.ProtoReflect.Descriptor instead.
func (*WalletRequest) Descriptor() ([]byte, []int) {
	return file_proto_solana_wallet_proto_rawDescGZIP(), []int{0}
}

func (x *WalletRequest) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

// Request message for multiple wallets.
type MultiWalletRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	WalletAddresses []string               `protobuf:"bytes,1,rep,name=wallet_addresses,json=walletAddresses,proto3" json:"wallet_addresses,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MultiWalletRequest) Reset() {
	*x = MultiWalletRequest{}
	mi := &file_proto_solana_wallet_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiWalletRequest) ProtoMessage() {}

func (x *MultiWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_wallet_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiWalletRequest.ProtoReflect.Descriptor instead.
func (*MultiWalletRequest) Descriptor() ([]byte, []int) {
	return file_proto_solana_wallet_proto_rawDescGZIP(), []int{1}
}

func (x *MultiWalletRequest) GetWalletAddresses() []string {
	if x != nil {
		return x.WalletAddresses
	}
	return nil
}

// Top‚Äêlevel response message.
type WalletResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Address           string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	SolBalance        float64                `protobuf:"fixed64,2,opt,name=sol_balance,json=solBalance,proto3" json:"sol_balance,omitempty"`
	SolValue          float64                `protobuf:"fixed64,3,opt,name=sol_value,json=solValue,proto3" json:"sol_value,omitempty"`
	WalletValue       float64                `protobuf:"fixed64,4,opt,name=wallet_value,json=walletValue,proto3" json:"wallet_value,omitempty"`
	Tokens            []*Token               `protobuf:"bytes,5,rep,name=tokens,proto3" json:"tokens,omitempty"`
	Transactions      []*Transaction         `protobuf:"bytes,6,rep,name=transactions,proto3" json:"transactions,omitempty"`
	LastUpdated       string                 `protobuf:"bytes,7,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	TokenAmount       int32                  `protobuf:"varint,8,opt,name=token_amount,json=tokenAmount,proto3" json:"token_amount,omitempty"`
	TransactionAmount int32                  `protobuf:"varint,9,opt,name=transaction_amount,json=transactionAmount,proto3" json:"transaction_amount,omitempty"`
	Progress          float64                `protobuf:"fixed64,10,opt,name=progress,proto3" json:"progress,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *WalletResponse) Reset() {
	*x = WalletResponse{}
	mi := &file_proto_solana_wallet_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletResponse) ProtoMessage() {}

func (x *WalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_wallet_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletResponse.ProtoReflect.Descriptor instead.
func (*WalletResponse) Descriptor() ([]byte, []int) {
	return file_proto_solana_wallet_proto_rawDescGZIP(), []int{2}
}

func (x *WalletResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *WalletResponse) GetSolBalance() float64 {
	if x != nil {
		return x.SolBalance
	}
	return 0
}

func (x *WalletResponse) GetSolValue() float64 {
	if x != nil {
		return x.SolValue
	}
	return 0
}

func (x *WalletResponse) GetWalletValue() float64 {
	if x != nil {
		return x.WalletValue
	}
	return 0
}

func (x *WalletResponse) GetTokens() []*Token {
	if x != nil {
		return x.Tokens
	}
	return nil
}

func (x *WalletResponse) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *WalletResponse) GetLastUpdated() string {
	if x != nil {
		return x.LastUpdated
	}
	return ""
}

func (x *WalletResponse) GetTokenAmount() int32 {
	if x != nil {
		return x.TokenAmount
	}
	return 0
}

func (x *WalletResponse) GetTransactionAmount() int32 {
	if x != nil {
		return x.TransactionAmount
	}
	return 0
}

func (x *WalletResponse) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

// Token information.
type Token struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Address       string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Pool          string                 `protobuf:"bytes,3,opt,name=pool,proto3" json:"pool,omitempty"`
	Description   string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Image         string                 `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
	Amount        float64                `protobuf:"fixed64,6,opt,name=amount,proto3" json:"amount,omitempty"`
	Price         float64                `protobuf:"fixed64,7,opt,name=price,proto3" json:"price,omitempty"`
	Pnl           float64                `protobuf:"fixed64,8,opt,name=pnl,proto3" json:"pnl,omitempty"`
	Invested      float64                `protobuf:"fixed64,9,opt,name=invested,proto3" json:"invested,omitempty"`
	Value         float64                `protobuf:"fixed64,10,opt,name=value,proto3" json:"value,omitempty"`
	HistoryPrices []*PricePoint          `protobuf:"bytes,11,rep,name=history_prices,json=historyPrices,proto3" json:"history_prices,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Token) Reset() {
	*x = Token{}
	mi := &file_proto_solana_wallet_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_wallet_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_proto_solana_wallet_proto_rawDescGZIP(), []int{3}
}

func (x *Token) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Token) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Token) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *Token) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Token) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Token) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Token) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Token) GetPnl() float64 {
	if x != nil {
		return x.Pnl
	}
	return 0
}

func (x *Token) GetInvested() float64 {
	if x != nil {
		return x.Invested
	}
	return 0
}

func (x *Token) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Token) GetHistoryPrices() []*PricePoint {
	if x != nil {
		return x.HistoryPrices
	}
	return nil
}

type PricePoint struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     int32                  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Open          float64                `protobuf:"fixed64,2,opt,name=open,proto3" json:"open,omitempty"`
	High          float64                `protobuf:"fixed64,3,opt,name=high,proto3" json:"high,omitempty"`
	Low           float64                `protobuf:"fixed64,4,opt,name=low,proto3" json:"low,omitempty"`
	Close         float64                `protobuf:"fixed64,5,opt,name=close,proto3" json:"close,omitempty"`
	Volume        float64                `protobuf:"fixed64,6,opt,name=volume,proto3" json:"volume,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PricePoint) Reset() {
	*x = PricePoint{}
	mi := &file_proto_solana_wallet_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PricePoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PricePoint) ProtoMessage() {}

func (x *PricePoint) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_wallet_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PricePoint.ProtoReflect.Descriptor instead.
func (*PricePoint) Descriptor() ([]byte, []int) {
	return file_proto_solana_wallet_proto_rawDescGZIP(), []int{4}
}

func (x *PricePoint) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PricePoint) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *PricePoint) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *PricePoint) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *PricePoint) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *PricePoint) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

// A transaction container.
type Transaction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Jsonrpc       string                 `protobuf:"bytes,1,opt,name=jsonrpc,proto3" json:"jsonrpc,omitempty"`
	Result        *TransactionResult     `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	Err           *Error                 `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
	Id            int32                  `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	mi := &file_proto_solana_wallet_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_wallet_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_proto_solana_wallet_proto_rawDescGZIP(), []int{5}
}

func (x *Transaction) GetJsonrpc() string {
	if x != nil {
		return x.Jsonrpc
	}
	return ""
}

func (x *Transaction) GetResult() *TransactionResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *Transaction) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *Transaction) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type Error struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Error) Reset() {
	*x = Error{}
	mi := &file_proto_solana_wallet_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_wallet_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_proto_solana_wallet_proto_rawDescGZIP(), []int{6}
}

func (x *Error) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// The detailed transaction result.
type TransactionResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockTime     int64                  `protobuf:"varint,1,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
	Meta          *Meta                  `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	Slot          uint64                 `protobuf:"varint,3,opt,name=slot,proto3" json:"slot,omitempty"`
	Transaction   *TransactionData       `protobuf:"bytes,4,opt,name=transaction,proto3" json:"transaction,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionResult) Reset() {
	*x = TransactionResult{}
	mi := &file_proto_solana_wallet_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionResult) ProtoMessage() {}

func (x *TransactionResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_wallet_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionResult.ProtoReflect.Descriptor instead.
func (*TransactionResult) Descriptor() ([]byte, []int) {
	return file_proto_solana_wallet_proto_rawDescGZIP(), []int{7}
}

func (x *TransactionResult) GetBlockTime() int64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

func (x *TransactionResult) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *TransactionResult) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *TransactionResult) GetTransaction() *TransactionData {
	if x != nil {
		return x.Transaction
	}
	return nil
}

// Meta data for a transaction.
type Meta struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	ComputeUnitsConsumed uint64                 `protobuf:"varint,1,opt,name=compute_units_consumed,json=computeUnitsConsumed,proto3" json:"compute_units_consumed,omitempty"`
	Fee                  uint64                 `protobuf:"varint,2,opt,name=fee,proto3" json:"fee,omitempty"`
	InnerInstructions    []*InnerInstruction    `protobuf:"bytes,3,rep,name=inner_instructions,json=innerInstructions,proto3" json:"inner_instructions,omitempty"`
	LogMessages          []string               `protobuf:"bytes,4,rep,name=log_messages,json=logMessages,proto3" json:"log_messages,omitempty"`
	PostBalances         []uint64               `protobuf:"varint,5,rep,packed,name=post_balances,json=postBalances,proto3" json:"post_balances,omitempty"`
	PreBalances          []uint64               `protobuf:"varint,6,rep,packed,name=pre_balances,json=preBalances,proto3" json:"pre_balances,omitempty"`
	PostTokenBalances    []*TokenBalance        `protobuf:"bytes,7,rep,name=post_token_balances,json=postTokenBalances,proto3" json:"post_token_balances,omitempty"`
	PreTokenBalances     []*TokenBalance        `protobuf:"bytes,8,rep,name=pre_token_balances,json=preTokenBalances,proto3" json:"pre_token_balances,omitempty"`
	Rewards              []*Reward              `protobuf:"bytes,9,rep,name=rewards,proto3" json:"rewards,omitempty"`
	Status               *Status                `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Meta) Reset() {
	*x = Meta{}
	mi := &file_proto_solana_wallet_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_wallet_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_proto_solana_wallet_proto_rawDescGZIP(), []int{8}
}

func (x *Meta) GetComputeUnitsConsumed() uint64 {
	if x != nil {
		return x.ComputeUnitsConsumed
	}
	return 0
}

func (x *Meta) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *Meta) GetInnerInstructions() []*InnerInstruction {
	if x != nil {
		return x.InnerInstructions
	}
	return nil
}

func (x *Meta) GetLogMessages() []string {
	if x != nil {
		return x.LogMessages
	}
	return nil
}

func (x *Meta) GetPostBalances() []uint64 {
	if x != nil {
		return x.PostBalances
	}
	return nil
}

func (x *Meta) GetPreBalances() []uint64 {
	if x != nil {
		return x.PreBalances
	}
	return nil
}

func (x *Meta) GetPostTokenBalances() []*TokenBalance {
	if x != nil {
		return x.PostTokenBalances
	}
	return nil
}

func (x *Meta) GetPreTokenBalances() []*TokenBalance {
	if x != nil {
		return x.PreTokenBalances
	}
	return nil
}

func (x *Meta) GetRewards() []*Reward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *Meta) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// Inner instructions.
type InnerInstruction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         uint32                 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Instructions  []*Instruction         `protobuf:"bytes,2,rep,name=instructions,proto3" json:"instructions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InnerInstruction) Reset() {
	*x = InnerInstruction{}
	mi := &file_proto_solana_wallet_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InnerInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InnerInstruction) ProtoMessage() {}

func (x *InnerInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_wallet_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InnerInstruction.ProtoReflect.Descriptor instead.
func (*InnerInstruction) Descriptor() ([]byte, []int) {
	return file_proto_solana_wallet_proto_rawDescGZIP(), []int{9}
}

func (x *InnerInstruction) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *InnerInstruction) GetInstructions() []*Instruction {
	if x != nil {
		return x.Instructions
	}
	return nil
}

// A token balance record.
type TokenBalance struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountIndex  uint32                 `protobuf:"varint,1,opt,name=account_index,json=accountIndex,proto3" json:"account_index,omitempty"`
	Mint          string                 `protobuf:"bytes,2,opt,name=mint,proto3" json:"mint,omitempty"`
	Owner         string                 `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	ProgramId     string                 `protobuf:"bytes,4,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty"`
	UiTokenAmount *TokenAmount           `protobuf:"bytes,5,opt,name=ui_token_amount,json=uiTokenAmount,proto3" json:"ui_token_amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenBalance) Reset() {
	*x = TokenBalance{}
	mi := &file_proto_solana_wallet_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenBalance) ProtoMessage() {}

func (x *TokenBalance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_wallet_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenBalance.ProtoReflect.Descriptor instead.
func (*TokenBalance) Descriptor() ([]byte, []int) {
	return file_proto_solana_wallet_proto_rawDescGZIP(), []int{10}
}

func (x *TokenBalance) GetAccountIndex() uint32 {
	if x != nil {
		return x.AccountIndex
	}
	return 0
}

func (x *TokenBalance) GetMint() string {
	if x != nil {
		return x.Mint
	}
	return ""
}

func (x *TokenBalance) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *TokenBalance) GetProgramId() string {
	if x != nil {
		return x.ProgramId
	}
	return ""
}

func (x *TokenBalance) GetUiTokenAmount() *TokenAmount {
	if x != nil {
		return x.UiTokenAmount
	}
	return nil
}

// Token amount details.
type TokenAmount struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Amount         string                 `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Decimals       uint32                 `protobuf:"varint,2,opt,name=decimals,proto3" json:"decimals,omitempty"`
	UiAmount       float64                `protobuf:"fixed64,3,opt,name=ui_amount,json=uiAmount,proto3" json:"ui_amount,omitempty"`
	UiAmountString string                 `protobuf:"bytes,4,opt,name=ui_amount_string,json=uiAmountString,proto3" json:"ui_amount_string,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TokenAmount) Reset() {
	*x = TokenAmount{}
	mi := &file_proto_solana_wallet_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenAmount) ProtoMessage() {}

func (x *TokenAmount) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_wallet_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenAmount.ProtoReflect.Descriptor instead.
func (*TokenAmount) Descriptor() ([]byte, []int) {
	return file_proto_solana_wallet_proto_rawDescGZIP(), []int{11}
}

func (x *TokenAmount) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *TokenAmount) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *TokenAmount) GetUiAmount() float64 {
	if x != nil {
		return x.UiAmount
	}
	return 0
}

func (x *TokenAmount) GetUiAmountString() string {
	if x != nil {
		return x.UiAmountString
	}
	return ""
}

// Reward information.
type Reward struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Info          string                 `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Reward) Reset() {
	*x = Reward{}
	mi := &file_proto_solana_wallet_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reward) ProtoMessage() {}

func (x *Reward) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_wallet_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reward.ProtoReflect.Descriptor instead.
func (*Reward) Descriptor() ([]byte, []int) {
	return file_proto_solana_wallet_proto_rawDescGZIP(), []int{12}
}

func (x *Reward) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

// Status structure.
type Status struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Result:
	//
	//	*Status_Ok
	//	*Status_ErrorMessage
	Result        isStatus_Result `protobuf_oneof:"result"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Status) Reset() {
	*x = Status{}
	mi := &file_proto_solana_wallet_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_wallet_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_proto_solana_wallet_proto_rawDescGZIP(), []int{13}
}

func (x *Status) GetResult() isStatus_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *Status) GetOk() string {
	if x != nil {
		if x, ok := x.Result.(*Status_Ok); ok {
			return x.Ok
		}
	}
	return ""
}

func (x *Status) GetErrorMessage() string {
	if x != nil {
		if x, ok := x.Result.(*Status_ErrorMessage); ok {
			return x.ErrorMessage
		}
	}
	return ""
}

type isStatus_Result interface {
	isStatus_Result()
}

type Status_Ok struct {
	Ok string `protobuf:"bytes,1,opt,name=ok,proto3,oneof"`
}

type Status_ErrorMessage struct {
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3,oneof"`
}

func (*Status_Ok) isStatus_Result() {}

func (*Status_ErrorMessage) isStatus_Result() {}

// The actual transaction data.
type TransactionData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *TransactionMessage    `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Signatures    []string               `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionData) Reset() {
	*x = TransactionData{}
	mi := &file_proto_solana_wallet_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionData) ProtoMessage() {}

func (x *TransactionData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_wallet_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionData.ProtoReflect.Descriptor instead.
func (*TransactionData) Descriptor() ([]byte, []int) {
	return file_proto_solana_wallet_proto_rawDescGZIP(), []int{14}
}

func (x *TransactionData) GetMessage() *TransactionMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *TransactionData) GetSignatures() []string {
	if x != nil {
		return x.Signatures
	}
	return nil
}

// The transaction message details.
type TransactionMessage struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	AccountKeys         []string               `protobuf:"bytes,1,rep,name=account_keys,json=accountKeys,proto3" json:"account_keys,omitempty"`
	AddressTableLookups []*AddressTableLookup  `protobuf:"bytes,2,rep,name=address_table_lookups,json=addressTableLookups,proto3" json:"address_table_lookups,omitempty"`
	Header              *MessageHeader         `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
	Instructions        []*Instruction         `protobuf:"bytes,4,rep,name=instructions,proto3" json:"instructions,omitempty"`
	RecentBlockhash     string                 `protobuf:"bytes,5,opt,name=recent_blockhash,json=recentBlockhash,proto3" json:"recent_blockhash,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *TransactionMessage) Reset() {
	*x = TransactionMessage{}
	mi := &file_proto_solana_wallet_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionMessage) ProtoMessage() {}

func (x *TransactionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_wallet_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionMessage.ProtoReflect.Descriptor instead.
func (*TransactionMessage) Descriptor() ([]byte, []int) {
	return file_proto_solana_wallet_proto_rawDescGZIP(), []int{15}
}

func (x *TransactionMessage) GetAccountKeys() []string {
	if x != nil {
		return x.AccountKeys
	}
	return nil
}

func (x *TransactionMessage) GetAddressTableLookups() []*AddressTableLookup {
	if x != nil {
		return x.AddressTableLookups
	}
	return nil
}

func (x *TransactionMessage) GetHeader() *MessageHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TransactionMessage) GetInstructions() []*Instruction {
	if x != nil {
		return x.Instructions
	}
	return nil
}

func (x *TransactionMessage) GetRecentBlockhash() string {
	if x != nil {
		return x.RecentBlockhash
	}
	return ""
}

// Address table lookups.
type AddressTableLookup struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AccountKey      string                 `protobuf:"bytes,1,opt,name=account_key,json=accountKey,proto3" json:"account_key,omitempty"`
	ReadonlyIndexes []uint32               `protobuf:"varint,2,rep,packed,name=readonly_indexes,json=readonlyIndexes,proto3" json:"readonly_indexes,omitempty"`
	WritableIndexes []uint32               `protobuf:"varint,3,rep,packed,name=writable_indexes,json=writableIndexes,proto3" json:"writable_indexes,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AddressTableLookup) Reset() {
	*x = AddressTableLookup{}
	mi := &file_proto_solana_wallet_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddressTableLookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressTableLookup) ProtoMessage() {}

func (x *AddressTableLookup) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_wallet_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressTableLookup.ProtoReflect.Descriptor instead.
func (*AddressTableLookup) Descriptor() ([]byte, []int) {
	return file_proto_solana_wallet_proto_rawDescGZIP(), []int{16}
}

func (x *AddressTableLookup) GetAccountKey() string {
	if x != nil {
		return x.AccountKey
	}
	return ""
}

func (x *AddressTableLookup) GetReadonlyIndexes() []uint32 {
	if x != nil {
		return x.ReadonlyIndexes
	}
	return nil
}

func (x *AddressTableLookup) GetWritableIndexes() []uint32 {
	if x != nil {
		return x.WritableIndexes
	}
	return nil
}

// Header of a transaction message.
type MessageHeader struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	NumReadonlySignedAccounts   uint32                 `protobuf:"varint,1,opt,name=num_readonly_signed_accounts,json=numReadonlySignedAccounts,proto3" json:"num_readonly_signed_accounts,omitempty"`
	NumReadonlyUnsignedAccounts uint32                 `protobuf:"varint,2,opt,name=num_readonly_unsigned_accounts,json=numReadonlyUnsignedAccounts,proto3" json:"num_readonly_unsigned_accounts,omitempty"`
	NumRequiredSignatures       uint32                 `protobuf:"varint,3,opt,name=num_required_signatures,json=numRequiredSignatures,proto3" json:"num_required_signatures,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *MessageHeader) Reset() {
	*x = MessageHeader{}
	mi := &file_proto_solana_wallet_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageHeader) ProtoMessage() {}

func (x *MessageHeader) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_wallet_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageHeader.ProtoReflect.Descriptor instead.
func (*MessageHeader) Descriptor() ([]byte, []int) {
	return file_proto_solana_wallet_proto_rawDescGZIP(), []int{17}
}

func (x *MessageHeader) GetNumReadonlySignedAccounts() uint32 {
	if x != nil {
		return x.NumReadonlySignedAccounts
	}
	return 0
}

func (x *MessageHeader) GetNumReadonlyUnsignedAccounts() uint32 {
	if x != nil {
		return x.NumReadonlyUnsignedAccounts
	}
	return 0
}

func (x *MessageHeader) GetNumRequiredSignatures() uint32 {
	if x != nil {
		return x.NumRequiredSignatures
	}
	return 0
}

// An instruction within the transaction.
type Instruction struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Accounts       []uint32               `protobuf:"varint,1,rep,packed,name=accounts,proto3" json:"accounts,omitempty"`
	Data           string                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	ProgramIdIndex uint32                 `protobuf:"varint,3,opt,name=program_id_index,json=programIdIndex,proto3" json:"program_id_index,omitempty"`
	StackHeight    uint32                 `protobuf:"varint,4,opt,name=stack_height,json=stackHeight,proto3" json:"stack_height,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Instruction) Reset() {
	*x = Instruction{}
	mi := &file_proto_solana_wallet_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Instruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instruction) ProtoMessage() {}

func (x *Instruction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_wallet_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instruction.ProtoReflect.Descriptor instead.
func (*Instruction) Descriptor() ([]byte, []int) {
	return file_proto_solana_wallet_proto_rawDescGZIP(), []int{18}
}

func (x *Instruction) GetAccounts() []uint32 {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *Instruction) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *Instruction) GetProgramIdIndex() uint32 {
	if x != nil {
		return x.ProgramIdIndex
	}
	return 0
}

func (x *Instruction) GetStackHeight() uint32 {
	if x != nil {
		return x.StackHeight
	}
	return 0
}

// Status message for transactions.
type StatusMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusMessage) Reset() {
	*x = StatusMessage{}
	mi := &file_proto_solana_wallet_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusMessage) ProtoMessage() {}

func (x *StatusMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_solana_wallet_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusMessage.ProtoReflect.Descriptor instead.
func (*StatusMessage) Descriptor() ([]byte, []int) {
	return file_proto_solana_wallet_proto_rawDescGZIP(), []int{19}
}

func (x *StatusMessage) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

var File_proto_solana_wallet_proto protoreflect.FileDescriptor

var file_proto_solana_wallet_proto_rawDesc = string([]byte{
	0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x22, 0x36, 0x0a, 0x0d, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3f, 0x0a, 0x12, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0xfc, 0x02, 0x0a,
	0x0e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x6c,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x73, 0x6f, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f,
	0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x12, 0x37, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2d, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0xae, 0x02, 0x0a, 0x05,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x6e, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x70, 0x6e, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x39, 0x0a, 0x0e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0d, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x22, 0x92, 0x01, 0x0a,
	0x0a, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x68, 0x69, 0x67,
	0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x22, 0x8b, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x73, 0x6f, 0x6e, 0x72, 0x70, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6a, 0x73, 0x6f, 0x6e, 0x72, 0x70, 0x63, 0x12, 0x31, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f,
	0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x35, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6c, 0x6f,
	0x74, 0x12, 0x39, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xde, 0x03, 0x0a,
	0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x66,
	0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x47, 0x0a,
	0x12, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x73,
	0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x0c, 0x70, 0x6f, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x44, 0x0a, 0x13, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x70, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x70, 0x72, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x61, 0x0a,
	0x10, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x37, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xb9, 0x01, 0x0a, 0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x3b, 0x0a, 0x0f, 0x75, 0x69, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0d, 0x75,
	0x69, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x88, 0x01, 0x0a,
	0x0b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x69, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x75, 0x69, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x75, 0x69, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x69, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x4b, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x10, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x6f,
	0x6b, 0x12, 0x25, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x67, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x9a, 0x02, 0x0a, 0x12,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x4e, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x52, 0x13, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73, 0x68, 0x22, 0x8b, 0x01, 0x0a, 0x12, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64,
	0x6f, 0x6e, 0x6c, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x77,
	0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x22, 0xcd, 0x01, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x1c, 0x6e, 0x75, 0x6d, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19,
	0x6e, 0x75, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x6e, 0x75, 0x6d,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1b, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x36,
	0x0a, 0x17, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x22, 0x27, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x97, 0x01, 0x0a,
	0x0d, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3c,
	0x0a, 0x09, 0x41, 0x64, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x10,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73,
	0x12, 0x1a, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_proto_solana_wallet_proto_rawDescOnce sync.Once
	file_proto_solana_wallet_proto_rawDescData []byte
)

func file_proto_solana_wallet_proto_rawDescGZIP() []byte {
	file_proto_solana_wallet_proto_rawDescOnce.Do(func() {
		file_proto_solana_wallet_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_solana_wallet_proto_rawDesc), len(file_proto_solana_wallet_proto_rawDesc)))
	})
	return file_proto_solana_wallet_proto_rawDescData
}

var file_proto_solana_wallet_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_proto_solana_wallet_proto_goTypes = []any{
	(*WalletRequest)(nil),      // 0: wallet.WalletRequest
	(*MultiWalletRequest)(nil), // 1: wallet.MultiWalletRequest
	(*WalletResponse)(nil),     // 2: wallet.WalletResponse
	(*Token)(nil),              // 3: wallet.Token
	(*PricePoint)(nil),         // 4: wallet.PricePoint
	(*Transaction)(nil),        // 5: wallet.Transaction
	(*Error)(nil),              // 6: wallet.Error
	(*TransactionResult)(nil),  // 7: wallet.TransactionResult
	(*Meta)(nil),               // 8: wallet.Meta
	(*InnerInstruction)(nil),   // 9: wallet.InnerInstruction
	(*TokenBalance)(nil),       // 10: wallet.TokenBalance
	(*TokenAmount)(nil),        // 11: wallet.TokenAmount
	(*Reward)(nil),             // 12: wallet.Reward
	(*Status)(nil),             // 13: wallet.Status
	(*TransactionData)(nil),    // 14: wallet.TransactionData
	(*TransactionMessage)(nil), // 15: wallet.TransactionMessage
	(*AddressTableLookup)(nil), // 16: wallet.AddressTableLookup
	(*MessageHeader)(nil),      // 17: wallet.MessageHeader
	(*Instruction)(nil),        // 18: wallet.Instruction
	(*StatusMessage)(nil),      // 19: wallet.StatusMessage
}
var file_proto_solana_wallet_proto_depIdxs = []int32{
	3,  // 0: wallet.WalletResponse.tokens:type_name -> wallet.Token
	5,  // 1: wallet.WalletResponse.transactions:type_name -> wallet.Transaction
	4,  // 2: wallet.Token.history_prices:type_name -> wallet.PricePoint
	7,  // 3: wallet.Transaction.result:type_name -> wallet.TransactionResult
	6,  // 4: wallet.Transaction.err:type_name -> wallet.Error
	8,  // 5: wallet.TransactionResult.meta:type_name -> wallet.Meta
	14, // 6: wallet.TransactionResult.transaction:type_name -> wallet.TransactionData
	9,  // 7: wallet.Meta.inner_instructions:type_name -> wallet.InnerInstruction
	10, // 8: wallet.Meta.post_token_balances:type_name -> wallet.TokenBalance
	10, // 9: wallet.Meta.pre_token_balances:type_name -> wallet.TokenBalance
	12, // 10: wallet.Meta.rewards:type_name -> wallet.Reward
	13, // 11: wallet.Meta.status:type_name -> wallet.Status
	18, // 12: wallet.InnerInstruction.instructions:type_name -> wallet.Instruction
	11, // 13: wallet.TokenBalance.ui_token_amount:type_name -> wallet.TokenAmount
	15, // 14: wallet.TransactionData.message:type_name -> wallet.TransactionMessage
	16, // 15: wallet.TransactionMessage.address_table_lookups:type_name -> wallet.AddressTableLookup
	17, // 16: wallet.TransactionMessage.header:type_name -> wallet.MessageHeader
	18, // 17: wallet.TransactionMessage.instructions:type_name -> wallet.Instruction
	0,  // 18: wallet.WalletService.AddWallet:input_type -> wallet.WalletRequest
	1,  // 19: wallet.WalletService.AggregateWallets:input_type -> wallet.MultiWalletRequest
	2,  // 20: wallet.WalletService.AddWallet:output_type -> wallet.WalletResponse
	2,  // 21: wallet.WalletService.AggregateWallets:output_type -> wallet.WalletResponse
	20, // [20:22] is the sub-list for method output_type
	18, // [18:20] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_proto_solana_wallet_proto_init() }
func file_proto_solana_wallet_proto_init() {
	if File_proto_solana_wallet_proto != nil {
		return
	}
	file_proto_solana_wallet_proto_msgTypes[13].OneofWrappers = []any{
		(*Status_Ok)(nil),
		(*Status_ErrorMessage)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_solana_wallet_proto_rawDesc), len(file_proto_solana_wallet_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_solana_wallet_proto_goTypes,
		DependencyIndexes: file_proto_solana_wallet_proto_depIdxs,
		MessageInfos:      file_proto_solana_wallet_proto_msgTypes,
	}.Build()
	File_proto_solana_wallet_proto = out.File
	file_proto_solana_wallet_proto_goTypes = nil
	file_proto_solana_wallet_proto_depIdxs = nil
}
